
ÉtÉçÅ[
capletÇÃâøäiãÅÇﬂÇÈ
ë´Ç∑

Underlying underlying(value);
Caplet caplet(strike, maturity, underlying);
Black black(volatility);
const Dual<double> capletPrice = caplet.calculatePrice(model); //model.volatility, underlying.tenor
const Dual<double> capPrice = sum(capletPrice);

IContract.h
template <typename C, typename T>
class IContract<C, T> {
    typedef T value_type;
    static value_type operator()()
    {
        return static_cast<C&>(*this);
    }
    value_type calculatePrice(const IModel<C&> model)
    {
        return static_cast<C&>(*this)->calculatePrice(model);
    }
};


Cap.h
template <typename M, typename T>
class Cap<M, T> : public IContract<Cap> {
    typedef T value_type;
    Cap(const double strike, const M& model, const double maturity);
};

IModel.h
template <typename T>
class IModel<T> {
    typedef T value_type;
    static value_type operator()(const T& x)
    {
        return static_cast<T>(*this);
    }
};


Black.h
template <typename T>
class Black<T> : public IModel<Black<T> > {
public:
    typedef T value_type;
    Black(const double volatility);
private:
    const double _volatility;
};

Black.cpp
Black::Black(const double volatility)
: _volatility(volatility)
{
}

Dual


main
